map $proxy_add_x_forwarded_for $client_ip {
  "~(?<IP>([0-9]{1,3}\.){3}[0-9]{1,3}),.*" $IP;
}

map $client_ip $client_real_ip {
    ''        $remote_addr;
    default   $client_ip;
}

upstream loadbalance {
  least_conn;
  server ${API_HOST}:${API_PORT};
}

upstream hashloadbalance {
  hash $client_real_ip;
  server ${API_HOST}:${API_PORT};
}

server {
  location / {
    proxy_set_header X-Real-IP $client_real_ip;
    proxy_set_header X-Forwarded-For $client_real_ip;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://loadbalance;
  }

  location /test {
    proxy_set_header X-Real-IP $client_real_ip;
    proxy_set_header X-Forwarded-For $client_real_ip;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://hashloadbalance;
  }

  location ~* \.io {
      proxy_set_header X-Real-IP $client_real_ip;
      proxy_set_header X-Forwarded-For $client_real_ip;
      proxy_set_header X-NginX-Proxy true;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_pass http://hashloadbalance;
      proxy_ssl_session_reuse off;
      proxy_set_header Host $http_host;
      proxy_cache_bypass $http_upgrade;
      proxy_redirect off;
    }
}